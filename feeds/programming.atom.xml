<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bytepawn - Programming</title><link href="/" rel="alternate"></link><link href="/feeds/programming.atom.xml" rel="self"></link><id>/</id><updated>2020-01-24T00:00:00+01:00</updated><entry><title>How I write SQL code</title><link href="/how-i-write-sql-code.html" rel="alternate"></link><published>2020-01-24T00:00:00+01:00</published><updated>2020-01-24T00:00:00+01:00</updated><author><name>Marton Trencseni</name></author><id>tag:None,2020-01-24:/how-i-write-sql-code.html</id><summary type="html">&lt;p&gt;I’ve worked at 5-10 different organizations, most of them were startups or startuppy companies. I’ve done a lot of planning in small teams, and also taken part in company-wide leadership planning. Here I will describe what has worked well for me in small team settings, focusing on time estimation. &lt;br/&gt;&lt;br/&gt; &lt;img src="/images/peak.png" alt="Reaching the peak" style="width: 200px;"/&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is going to be a simple post about SQL code formatting. Most of this comes from my time as a Data Engineer at Facebook.&lt;/p&gt;
&lt;p&gt;I’ve always cared a lot about writing readable code. Readability has several components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;directory layout&lt;/li&gt;
&lt;li&gt;breaking code into files (eg. what to put in headers, how many)&lt;/li&gt;
&lt;li&gt;code layed out in files (eg. ordering of includes, templates, classes, functions)&lt;/li&gt;
&lt;li&gt;naming of files, classes, functions and variables&lt;/li&gt;
&lt;li&gt;indentation, line width&lt;/li&gt;
&lt;li&gt;comments in code files&lt;/li&gt;
&lt;li&gt;the modular structure of the code itself (eg. design patterns)&lt;/li&gt;
&lt;li&gt;high-level documentation that explains design choices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Readable code should be relatively easy to explore and read. I say “relatively”, because most programs have a lot of innate complexity that you have to wrap your head around, even if it’s well-written.&lt;/p&gt;
&lt;p&gt;A famous example of high quality and readable (C++) code is the &lt;a href="https://github.com/mtrencseni/quake3"&gt;Quake3&lt;/a&gt; or &lt;a href="https://github.com/mtrencseni/doom3"&gt;Doom3&lt;/a&gt; code by &lt;a href="https://en.wikipedia.org/wiki/John_Carmack"&gt;John Carmack&lt;/a&gt;. When I was working on &lt;a href="https://github.com/scalien/scaliendb"&gt;ScalienDB&lt;/a&gt; many years ago, I tried to write C++ code in a similar style.&lt;/p&gt;
&lt;p&gt;Writing good SQL code is much simpler than writing good C++ code. SQL code has no templates, classes, and in my experience analytical “data mining” SQL code also has no functions (=stored procedures). It’s really just a lot of standalone &lt;code&gt;SELECT&lt;/code&gt;s, sometimes chained with &lt;code&gt;WITH&lt;/code&gt;, or by dropping results into tables and &lt;code&gt;SELECT&lt;/code&gt;ing out of those tables in the next step. Having said that, I still see a lot of data people writing hard to read SQL code.&lt;/p&gt;</content><category term="programming"></category><category term="sql"></category></entry></feed>