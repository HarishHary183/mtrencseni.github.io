<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bytepawn - Books</title><link href="/" rel="alternate"></link><link href="/feeds/books.atom.xml" rel="self"></link><id>/</id><updated>2016-05-14T00:00:00+02:00</updated><entry><title>Hack, HHVM and avoiding the Second-system effect</title><link href="/hack-hhvm-second-system-effect.html" rel="alternate"></link><published>2016-05-14T00:00:00+02:00</published><updated>2016-05-14T00:00:00+02:00</updated><author><name>Marton Trencseni</name></author><id>tag:None,2016-05-14:/hack-hhvm-second-system-effect.html</id><summary type="html">&lt;p&gt;I read this book on my first vacation after I started working at Facebook and thus became a semi-regular &lt;a href="http://hhvm.com/"&gt;Hack/HHVM&lt;/a&gt; user. I highly recommend reading (parts of) it. But not to learn Hack/PHP, which is irrelevant to most people. Instead, it’s to learn about how Facebook improved it’s www codebase and performance without rewriting the old PHP code in one big effort, and thus avoided the famous Second-system effect.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I read &lt;a href="http://www.amazon.com/Hack-HHVM-Programming-Productivity-Breaking/dp/1491920874"&gt;Hack &amp;amp; HHVM—Programming Productivity without Breaking Things&lt;/a&gt; on my first vacation after I started working at Facebook and thus became a semi-regular Hack/HHVM user. I highly recommend reading (parts of) it. But not to learn Hack/PHP, which is irrelevant to most people. Instead, it’s to learn about how Facebook improved it’s www codebase and performance without rewriting the old PHP code in one big effort, and thus avoided the famous &lt;em&gt;Second-system effect&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hack &amp;amp; HHVM book" src="http://akamaicovers.oreilly.com/images/0636920037194/cat.gif" title="Hack &amp;amp; HHVM book"&gt;&lt;/p&gt;
&lt;h2&gt;Second-system effect&lt;/h2&gt;
&lt;p&gt;The second system effect was first described by Fred Brooks in &lt;a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month"&gt;The Mythical Man Month&lt;/a&gt;, based on his experiences managing operating system software development at IBM in the early 1960s:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The second-system effect proposes that, when an architect designs a second system, it is the most dangerous system they will ever design, because they will tend to incorporate all of the additions they originally did not add to the first system due to inherent time constraints. Thus, when embarking on a second system, an engineer should be mindful that they are susceptible to over-engineering it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me offer a more modern description: version 1.0 of the product/app/software is successful. Over time the programmers realize that, knowing what they know now, they could do a much better job. Meanwhile, the technology landscape changes, it'd be nice to take advantage of the shiny new architectures, languages, frameworks available. So the team embarks on the quest to ship 2.0―a rewrite. Inevitably, even good teams will over-engineer, and the result will be a technological and project management mess. 2.0 projects like this miss their original ship dates by several years. Once it does ship, it’s buggy and slow, because unlike 1.0 it has no fine-tuning, since it hasn't seen the light of real-world usage yet. So several more years go by until 2.0 is also fine-tuned. At this point the new set of programmers―the cohort who joined after 1.0―can repeat the Second-system effect with 3.0, which for them will be the new 2.0. Rinse, repeat.&lt;/p&gt;
&lt;p&gt;I think within this book is a nice little lesson about how to avoid the Second-system effect. The book doesn't actually mention the Second-system effect, and I'm not implying anything about the history of the main www codebase at Facebook. I'm not saying that Facebook specifically did this to avoid the Second-system effect. It's just a lesson that I think can be extracted from the design decisions explained in the book.&lt;/p&gt;
&lt;h2&gt;PHP, Hack, HHVM&lt;/h2&gt;
&lt;p&gt;The story here is that Facebook started out as a PHP codebase. Over time the product became very successful, which meant that it was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;very large (1M+ LOC)&lt;/li&gt;
&lt;li&gt;serving a large number of users&lt;/li&gt;
&lt;li&gt;being worked on by a large number of engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there was a desire to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speed it up so it can serve more users per node&lt;/li&gt;
&lt;li&gt;make it easier for engineers to work on the code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think that for many programmers (including yours truly) the instinctive reaction would have been to say "PHP sucks, it's slow and unsafe, let's rewrite the www codebase in a real programming language like Java and run on the JVM". What's interesting is that Facebook did not do this; Facebook did not discard PHP.&lt;/p&gt;
&lt;p&gt;Instead, Facebook decided to improve the layer below the application code to improve overall performance, and write new code in a way which takes advantage of the features of the improved layer (and very slowly deprecate old code). The "layer" here is actually many things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hack, a language like PHP, but much nicer&lt;/li&gt;
&lt;li&gt;a static type-checker for Hack&lt;/li&gt;
&lt;li&gt;HHVM, a runtime for Hack (and also regular PHP)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Two notes are in order here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Historically, there was something called &lt;a href="https://en.wikipedia.org/wiki/HipHop_for_PHP"&gt;HPHPc&lt;/a&gt; before HHVM. It was a PHP-to-C++ compiler, but it’s no longer being used at Facebook.&lt;/li&gt;
&lt;li&gt;Hack and HHVM did not come about as a result of a committee sitting down, identifying the problem, scoping out the solutions, and picking one. They originated (both HPHPc and the Hack language) from &lt;a href="https://www.facebook.com/hackathon"&gt;Hackathons&lt;/a&gt;, an integral part of Facebook engineering culture, where individual engineers were attacking problems they thought are promising and important.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My favorite features of Hack/HHVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;very fast&lt;/li&gt;
&lt;li&gt;100% interoperability with regular PHP code (eg. existing code)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.hhvm.com/hack/types/introduction"&gt;types&lt;/a&gt; (can also run regular PHP code in untyped mode)&lt;/li&gt;
&lt;li&gt;the &lt;a href="https://docs.hhvm.com/hack/typechecker/introduction"&gt;type-checker&lt;/a&gt; is very fast, millisecond response time even is very large codebases since it maintains state&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.hhvm.com/hack/generics/introduction"&gt;generics&lt;/a&gt;, &lt;a href="https://docs.hhvm.com/hack/lambdas/introduction"&gt;lambdas&lt;/a&gt;, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.hhvm.com/hack/async/introduction"&gt;async/await keyword for cooperative multitasking&lt;/a&gt;: this is very cool and worth reading up on. Essentially it's language/runtime level support for (single-threaded) event-driven architecture (epoll, kqueue, Completion Ports), so you don't have to explicitly manage the state like we did in the plain old C++ &lt;a href="https://github.com/scalien/scaliendb"&gt;ScalienDB codebase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.hhvm.com/hack/XHP/introduction"&gt;XHP&lt;/a&gt;: the way to do www rendering safely (in the xss sense) in Hack, with language level support for XHTML and custom modules (eg. a Comments box)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lesson learned&lt;/h2&gt;
&lt;p&gt;So the interesting lesson here is that a possible way out of the Second-system effect is to start improving the environment (language, runtime, frameworks, etc.) of the main codebase instead of rewriting the main codebase. I certainly don't think this is the solution, in many cases it cannot be applied, but it's something to keep in mind as a design pattern. Some of the challenges of this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need a couple of really smart people who can design and implement a new language that's backwards compatible with existing code.&lt;/li&gt;
&lt;li&gt;You need to put sustained effort into it afterwards, keeping it mostly compatible with the standard version of the language.&lt;/li&gt;
&lt;li&gt;Every new engineer will need time to ramp up using the new language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another interesting aspect of this is the investment needed. Rewriting the whole application codebase is an all-in project, with all (or much) of the engineering team working on it. I assert that changing out the layers below and around it can be accomplished by a smaller, focused team, iteratively. It's a smaller bet. Writing HHVM was certainly a smaller effort than rewriting all of Facebook in Java would have been! Having said that, an organizational/management note: I do think you need a fairly large group of people to generate enough ideas (and Hackathon projects) so that some really good and impactful ones come out of it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I will conclude this post with my personal impressions: working with Hack/HHVM is very pleasant. The type checker holds your hand all the way, so it feels much nicer/safer than eg. writing Python. The syntax is a bit unfortunate in places, but overall it’s a non-issue for me. I'd consider using Hack/HHVM for personal projects or a startup. It's completely open source, so anybody can use it for their projects.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/zsol"&gt;Zsolt Dollenstein&lt;/a&gt; for reviewing this blog post and giving valuable suggestions.&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hhvm.com/"&gt;HHVM main site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/hhvm/"&gt;HHVM Facebook page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/hhvm"&gt;HHVM on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.engineyard.com/2014/hhvm-hack"&gt;A series of posts about Hack/HHVM from 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you find Hack interesting, check out &lt;a href="http://flowtype.org/"&gt;Flow, a static type checker for Javascript, by Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="books"></category><category term="programming"></category><category term="hhvm"></category><category term="brooks"></category></entry><entry><title>Systems thinking and system traps</title><link href="/systems-thinking.html" rel="alternate"></link><published>2016-01-06T00:00:00+01:00</published><updated>2016-01-06T00:00:00+01:00</updated><author><name>Marton Trencseni</name></author><id>tag:None,2016-01-06:/systems-thinking.html</id><summary type="html">&lt;p&gt;Thinking in Systems, written by the late Donella Meadows, is a book about how to think about systems, how to control systems and how systems change and control themselves. A system can be anything from a heating furnace to a social system. The gem of the book is the part about system traps. System traps are ways a system can go wrong; examples are drift to low performance, seeking the wrong goals, shifting the burden, etc.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/1603580557/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=1944687762&amp;amp;pf_rd_s=lpo-top-stripe-1&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=0123859158&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_r=181NKCEKSEPQ62PT0S07"&gt;Thinking in Systems&lt;/a&gt;, written by the late &lt;a href="https://en.wikipedia.org/wiki/Donella_Meadows"&gt;Donella Meadows&lt;/a&gt;, is a book about how to think about systems, how to control systems and how systems change and control themselves. A system can be anything from a heating furnace to a social system. The book is conceptual, there’s not a single equation in it, it's not about differential equations or control theory.&lt;/p&gt;
&lt;h2&gt;System traps&lt;/h2&gt;
&lt;p&gt;The gem of the book is the part about &lt;em&gt;system traps&lt;/em&gt;. System traps are ways a system can go wrong. It’s really interesting to read about system traps and then notice and observe them in action: in micro environments such as a company and in macro environments such as an industry or a  country. Here’s a list of the most interesting system traps from the book, with some examples.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Policy resistance:&lt;/strong&gt; The inherent resistance of the establishment to allow changes to affect the system. People would rather live with a flawed system that is familiar then to allow changes that might cause uncertainty and instability. Such resistance can cause inevitable collapse to be more dramatic, sometime even catastrophic.&lt;br&gt;
Example: &lt;a href="http://www.wsj.com/articles/obama-to-discuss-gun-control-options-with-attorney-general-1451646004"&gt;US citizens resisting Obama’s gun control changes.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Drift to low performance:&lt;/strong&gt; The notion that prolonged failures causes acceptance of the new state of things, “new normal”.&lt;br&gt;
Example: a great example is soccer in Hungary. Hungary used to have a very strong soccer culture, but over time quality decayed to the point where today, a draw or only getting defeated by 1 goal is considered a good result. All this even though the hungarian government is investing large amounts into the sport. The root cause for this sustained drift to low performance seems to be that soccer is used as a way to channel money from the government to private individuals, ie. corruption.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Seeking wrong goals:&lt;/strong&gt; Sometime goals change. Many systems suffer from the fact that original goal don’t make any sense in the current context, or never did. Pursuit of wrong goals will cause the system pursue these goals, capturing wrong or insignificant metrics, leaving the illusion of progress, while heading toward system collapse.&lt;br&gt;
Example: &lt;a href="http://techcrunch.com/2011/07/30/vanity-metrics/"&gt;startups seeking to increase vanity metrics&lt;/a&gt; such as registered users and bookings instead of engagement and profits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shifting the burden:&lt;/strong&gt; Notion that risk is shifted to someone else, while success is reaped by the actor.&lt;br&gt;
Example: &lt;a href="https://hbr.org/2013/05/six-myths-about-venture-capitalists"&gt;venture capitalists and hedge fund managers work under a model&lt;/a&gt; where they get a nice base salary, a nice bonus if their fund performs well, but there is no downside for them. Turn around times are on the order of 10 years, so there’s little historic data on fund manager’s performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The tragedy of commons:&lt;/strong&gt; This is classic economic theory, described in terms of system thinking. The common, defined as community space – such as a town common, is a shared resource. This resource can be governed by community standards, privatization or effective regulation. Each approach has tradeoffs and benefits. It’s the conclusion of the [Donella Meadows] that only regulation is effective since the community standards are usually not enough.&lt;br&gt;
Example: &lt;a href="https://en.wikipedia.org/wiki/Cybersquatting"&gt;domain name squatting&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Success to the Successful:&lt;/strong&gt; The notion that success will give advantage to those that have already succeeded, thus limiting the “losers” ability to win in the future. “The rich get richer!”&lt;br&gt;
Example: that’s how it is everywhere, see &lt;a href="http://www.economist.com/blogs/economist-explains/2014/05/economist-explains"&gt;Thomas Piketty’s book Capital&lt;/a&gt;. A more specific example is entrepreneurs who’ve had a successful startup previous have an easier time raising money for their next startup. Surprisingly, &lt;a href="https://hbr.org/2014/02/research-serial-entrepreneurs-arent-any-more-likely-to-succeed/"&gt;data doesn’t show a correlation between past and future success&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rule beating:&lt;/strong&gt; The notion that rules, or laws, are ignored, broken or skirted. The cause of rule breaking is usually related to the fact that these rules are perceived as unjust or not flexible enough wrt real life issues.&lt;br&gt;
Example: there’s a whole industry called &lt;a href="https://en.wikipedia.org/wiki/Search_engine_optimization"&gt;SEO&lt;/a&gt; to &lt;a href="https://www.quora.com/What-techniques-do-websites-use-to-game-the-Google-search-engine"&gt;game search engine rankings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="systems"></category><category term="books"></category></entry></feed>